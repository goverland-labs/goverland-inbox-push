// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/goverland-labs/goverland-inbox-push/internal/sender (interfaces: UsersFinder,SettingsProvider,CoreDataProvider,DataManipulator,MessageSender,PushManipulator)

// Package sender is a generated GoMock package.
package sender

import (
	context "context"
	reflect "reflect"

	messaging "firebase.google.com/go/v4/messaging"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	core_web_sdk "github.com/goverland-labs/goverland-core-sdk-go"
	dao "github.com/goverland-labs/goverland-core-sdk-go/dao"
	proposal "github.com/goverland-labs/goverland-core-sdk-go/proposal"
	inboxapi "github.com/goverland-labs/goverland-inbox-api-protocol/protobuf/inboxapi"
	grpc "google.golang.org/grpc"
)

// MockUsersFinder is a mock of UsersFinder interface.
type MockUsersFinder struct {
	ctrl     *gomock.Controller
	recorder *MockUsersFinderMockRecorder
}

// MockUsersFinderMockRecorder is the mock recorder for MockUsersFinder.
type MockUsersFinderMockRecorder struct {
	mock *MockUsersFinder
}

// NewMockUsersFinder creates a new mock instance.
func NewMockUsersFinder(ctrl *gomock.Controller) *MockUsersFinder {
	mock := &MockUsersFinder{ctrl: ctrl}
	mock.recorder = &MockUsersFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersFinder) EXPECT() *MockUsersFinderMockRecorder {
	return m.recorder
}

// AllowSendingPush mocks base method.
func (m *MockUsersFinder) AllowSendingPush(arg0 context.Context, arg1 *inboxapi.AllowSendingPushRequest, arg2 ...grpc.CallOption) (*inboxapi.AllowSendingPushResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AllowSendingPush", varargs...)
	ret0, _ := ret[0].(*inboxapi.AllowSendingPushResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllowSendingPush indicates an expected call of AllowSendingPush.
func (mr *MockUsersFinderMockRecorder) AllowSendingPush(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowSendingPush", reflect.TypeOf((*MockUsersFinder)(nil).AllowSendingPush), varargs...)
}

// GetUserProfile mocks base method.
func (m *MockUsersFinder) GetUserProfile(arg0 context.Context, arg1 *inboxapi.GetUserProfileRequest, arg2 ...grpc.CallOption) (*inboxapi.UserProfile, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserProfile", varargs...)
	ret0, _ := ret[0].(*inboxapi.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUsersFinderMockRecorder) GetUserProfile(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUsersFinder)(nil).GetUserProfile), varargs...)
}

// MockSettingsProvider is a mock of SettingsProvider interface.
type MockSettingsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsProviderMockRecorder
}

// MockSettingsProviderMockRecorder is the mock recorder for MockSettingsProvider.
type MockSettingsProviderMockRecorder struct {
	mock *MockSettingsProvider
}

// NewMockSettingsProvider creates a new mock instance.
func NewMockSettingsProvider(ctrl *gomock.Controller) *MockSettingsProvider {
	mock := &MockSettingsProvider{ctrl: ctrl}
	mock.recorder = &MockSettingsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettingsProvider) EXPECT() *MockSettingsProviderMockRecorder {
	return m.recorder
}

// GetPushDetails mocks base method.
func (m *MockSettingsProvider) GetPushDetails(arg0 context.Context, arg1 *inboxapi.GetPushDetailsRequest, arg2 ...grpc.CallOption) (*inboxapi.GetPushDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPushDetails", varargs...)
	ret0, _ := ret[0].(*inboxapi.GetPushDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPushDetails indicates an expected call of GetPushDetails.
func (mr *MockSettingsProviderMockRecorder) GetPushDetails(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushDetails", reflect.TypeOf((*MockSettingsProvider)(nil).GetPushDetails), varargs...)
}

// GetPushToken mocks base method.
func (m *MockSettingsProvider) GetPushToken(arg0 context.Context, arg1 *inboxapi.GetPushTokenRequest, arg2 ...grpc.CallOption) (*inboxapi.PushTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPushToken", varargs...)
	ret0, _ := ret[0].(*inboxapi.PushTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPushToken indicates an expected call of GetPushToken.
func (mr *MockSettingsProviderMockRecorder) GetPushToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushToken", reflect.TypeOf((*MockSettingsProvider)(nil).GetPushToken), varargs...)
}

// GetPushTokenList mocks base method.
func (m *MockSettingsProvider) GetPushTokenList(arg0 context.Context, arg1 *inboxapi.GetPushTokenListRequest, arg2 ...grpc.CallOption) (*inboxapi.PushTokenListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPushTokenList", varargs...)
	ret0, _ := ret[0].(*inboxapi.PushTokenListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPushTokenList indicates an expected call of GetPushTokenList.
func (mr *MockSettingsProviderMockRecorder) GetPushTokenList(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPushTokenList", reflect.TypeOf((*MockSettingsProvider)(nil).GetPushTokenList), varargs...)
}

// MockCoreDataProvider is a mock of CoreDataProvider interface.
type MockCoreDataProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCoreDataProviderMockRecorder
}

// MockCoreDataProviderMockRecorder is the mock recorder for MockCoreDataProvider.
type MockCoreDataProviderMockRecorder struct {
	mock *MockCoreDataProvider
}

// NewMockCoreDataProvider creates a new mock instance.
func NewMockCoreDataProvider(ctrl *gomock.Controller) *MockCoreDataProvider {
	mock := &MockCoreDataProvider{ctrl: ctrl}
	mock.recorder = &MockCoreDataProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoreDataProvider) EXPECT() *MockCoreDataProviderMockRecorder {
	return m.recorder
}

// GetDao mocks base method.
func (m *MockCoreDataProvider) GetDao(arg0 context.Context, arg1 uuid.UUID) (*dao.Dao, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDao", arg0, arg1)
	ret0, _ := ret[0].(*dao.Dao)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDao indicates an expected call of GetDao.
func (mr *MockCoreDataProviderMockRecorder) GetDao(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDao", reflect.TypeOf((*MockCoreDataProvider)(nil).GetDao), arg0, arg1)
}

// GetProposal mocks base method.
func (m *MockCoreDataProvider) GetProposal(arg0 context.Context, arg1 string) (*proposal.Proposal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProposal", arg0, arg1)
	ret0, _ := ret[0].(*proposal.Proposal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProposal indicates an expected call of GetProposal.
func (mr *MockCoreDataProviderMockRecorder) GetProposal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProposal", reflect.TypeOf((*MockCoreDataProvider)(nil).GetProposal), arg0, arg1)
}

// GetUserVotes mocks base method.
func (m *MockCoreDataProvider) GetUserVotes(arg0 context.Context, arg1 string, arg2 core_web_sdk.GetUserVotesRequest) (*proposal.VoteList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserVotes", arg0, arg1, arg2)
	ret0, _ := ret[0].(*proposal.VoteList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserVotes indicates an expected call of GetUserVotes.
func (mr *MockCoreDataProviderMockRecorder) GetUserVotes(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserVotes", reflect.TypeOf((*MockCoreDataProvider)(nil).GetUserVotes), arg0, arg1, arg2)
}

// MockDataManipulator is a mock of DataManipulator interface.
type MockDataManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockDataManipulatorMockRecorder
}

// MockDataManipulatorMockRecorder is the mock recorder for MockDataManipulator.
type MockDataManipulatorMockRecorder struct {
	mock *MockDataManipulator
}

// NewMockDataManipulator creates a new mock instance.
func NewMockDataManipulator(ctrl *gomock.Controller) *MockDataManipulator {
	mock := &MockDataManipulator{ctrl: ctrl}
	mock.recorder = &MockDataManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataManipulator) EXPECT() *MockDataManipulatorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDataManipulator) Create(arg0 *History) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockDataManipulatorMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDataManipulator)(nil).Create), arg0)
}

// CreateSendQueueRequest mocks base method.
func (m *MockDataManipulator) CreateSendQueueRequest(arg0 context.Context, arg1 *SendQueue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSendQueueRequest", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSendQueueRequest indicates an expected call of CreateSendQueueRequest.
func (mr *MockDataManipulatorMockRecorder) CreateSendQueueRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSendQueueRequest", reflect.TypeOf((*MockDataManipulator)(nil).CreateSendQueueRequest), arg0, arg1)
}

// GetByHash mocks base method.
func (m *MockDataManipulator) GetByHash(arg0 string) (*History, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", arg0)
	ret0, _ := ret[0].(*History)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHash indicates an expected call of GetByHash.
func (mr *MockDataManipulatorMockRecorder) GetByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockDataManipulator)(nil).GetByHash), arg0)
}

// MarkAsClicked mocks base method.
func (m *MockDataManipulator) MarkAsClicked(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsClicked", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsClicked indicates an expected call of MarkAsClicked.
func (mr *MockDataManipulatorMockRecorder) MarkAsClicked(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsClicked", reflect.TypeOf((*MockDataManipulator)(nil).MarkAsClicked), arg0)
}

// MarkAsSent mocks base method.
func (m *MockDataManipulator) MarkAsSent(arg0 context.Context, arg1 []uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsSent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsSent indicates an expected call of MarkAsSent.
func (mr *MockDataManipulatorMockRecorder) MarkAsSent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsSent", reflect.TypeOf((*MockDataManipulator)(nil).MarkAsSent), arg0, arg1)
}

// QueueByFilters mocks base method.
func (m *MockDataManipulator) QueueByFilters(arg0 context.Context, arg1 []Filter) ([]SendQueue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueueByFilters", arg0, arg1)
	ret0, _ := ret[0].([]SendQueue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueueByFilters indicates an expected call of QueueByFilters.
func (mr *MockDataManipulatorMockRecorder) QueueByFilters(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueueByFilters", reflect.TypeOf((*MockDataManipulator)(nil).QueueByFilters), arg0, arg1)
}

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMessageSender) Send(arg0 context.Context, arg1 *messaging.Message) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockMessageSenderMockRecorder) Send(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMessageSender)(nil).Send), arg0, arg1)
}

// MockPushManipulator is a mock of PushManipulator interface.
type MockPushManipulator struct {
	ctrl     *gomock.Controller
	recorder *MockPushManipulatorMockRecorder
}

// MockPushManipulatorMockRecorder is the mock recorder for MockPushManipulator.
type MockPushManipulatorMockRecorder struct {
	mock *MockPushManipulator
}

// NewMockPushManipulator creates a new mock instance.
func NewMockPushManipulator(ctrl *gomock.Controller) *MockPushManipulator {
	mock := &MockPushManipulator{ctrl: ctrl}
	mock.recorder = &MockPushManipulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPushManipulator) EXPECT() *MockPushManipulatorMockRecorder {
	return m.recorder
}

// MarkAsClicked mocks base method.
func (m *MockPushManipulator) MarkAsClicked(arg0 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsClicked", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsClicked indicates an expected call of MarkAsClicked.
func (mr *MockPushManipulatorMockRecorder) MarkAsClicked(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsClicked", reflect.TypeOf((*MockPushManipulator)(nil).MarkAsClicked), arg0)
}

// ProcessFeedItem mocks base method.
func (m *MockPushManipulator) ProcessFeedItem(arg0 context.Context, arg1 Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessFeedItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessFeedItem indicates an expected call of ProcessFeedItem.
func (mr *MockPushManipulatorMockRecorder) ProcessFeedItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessFeedItem", reflect.TypeOf((*MockPushManipulator)(nil).ProcessFeedItem), arg0, arg1)
}
